generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  NOT_VERIFIED
  VERIFIED
  MODERATOR
  ADMIN
}

// next-auth
model User {
  id            String    @id @default(uuid(4)) @db.Uuid
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  /// NOTE: role=VERIFIED does not imply emailVerified or vice versa
  /// emailVerified=true when the user first submits a request and verifies it
  /// role=VERIFIED when the request is approved (granting them power to add larps without pre-moderation)
  role UserRole @default(NOT_VERIFIED)

  larps                   RelatedUser[]
  authenticators          Authenticator[]
  requestsResolvedByUser  ModerationRequest[] @relation("RequestsResolvedByUser")
  requestsSubmittedByUser ModerationRequest[] @relation("RequestsSubmittedByUser")

  @@map("user")
}

model Account {
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id") @db.Uuid
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int     @map("counter")
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String? @map("transports")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}

// larpit.fi
enum LarpType {
  ONE_SHOT
  CAMPAIGN_LARP

  CAMPAIGN // of CAMPAIGN_LARPs
  MULTIPLE_RUNS // of ONE_SHOTs (or, in rare occasions, CAMPAIGNs)

  OTHER_EVENT_SERIES
  OTHER_EVENT
}

enum Language {
  fi
  en
  sv
  OTHER
}

model Country {
  id             String         @id // Wikidata id with wd: prefix, eg. wd:Q33
  code           String?        @unique // ISO 3166-1 alpha-2 country code, eg. FI
  nameFi         String?        @map("name_fi")
  nameSv         String?        @map("name_sv")
  nameEn         String?        @map("name_en")
  municipalities Municipality[]

  @@map("country")
}

model Municipality {
  id                    String  @id
  nameFi                String? @map("name_fi")
  nameSv                String? @map("name_sv")
  nameOther             String? @map("name_other")
  nameOtherLanguageCode String? @map("name_other_language_code")
  countryId             String  @default("wd:Q33") @map("country_code")
  lat                   Float
  long                  Float
  larps                 Larp[]

  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@map("municipality")
}

model Larp {
  id       String   @id @default(uuid(7)) @db.Uuid
  name     String
  type     LarpType @default(ONE_SHOT)
  language Language
  tagline  String?
  alias    String?  @unique

  locationText   String? @map("location_text")
  municipalityId String? @map("municipality_id")

  numPlayerCharacters  Int? @map("num_player_characters")
  numTotalParticipants Int? @map("num_total_participants")

  fluffText   String? @map("fluff_text")
  description String? @map("description")

  // createdAt from id (UUIDv7)
  updatedAt DateTime @updatedAt @map("updated_at")

  startsAt       DateTime? @map("starts_at")
  endsAt         DateTime? @map("ends_at")
  signupStartsAt DateTime? @map("signup_starts_at")
  signupEndsAt   DateTime? @map("signup_ends_at")

  links             LarpLink[]
  relatedLarpsLeft  RelatedLarp[]       @relation("RelatedLarpsLeft")
  relatedLarpsRight RelatedLarp[]       @relation("RelatedLarpsRight")
  relatedUsers      RelatedUser[]
  requests          ModerationRequest[]
  municipality      Municipality?       @relation(fields: [municipalityId], references: [id], onDelete: SetNull)

  @@map("larp")
}

enum RelatedLarpType {
  SEQUEL
  SPINOFF

  // CAMPAIGN_LARP INSTANCE_OF CAMPAIGN
  // ONE_SHOT INSTANCE_OF MULTIPLE_RUNS
  // etc.
  IN_CAMPAIGN
  IN_SERIES
  RUN_OF
  RERUN_OF

  PLAYED_AT
}

model RelatedLarp {
  leftId  String          @map("left_id") @db.Uuid
  rightId String          @map("right_id") @db.Uuid
  type    RelatedLarpType

  left  Larp @relation("RelatedLarpsLeft", fields: [leftId], references: [id], onDelete: Cascade)
  right Larp @relation("RelatedLarpsRight", fields: [rightId], references: [id], onDelete: Cascade)

  @@id([leftId, rightId])
  @@map("related_larp")
}

enum RelatedUserRole {
  EDITOR
  CREATED_BY
  GAME_MASTER
  VOLUNTEER
  PLAYER
  FAVORITE
}

enum Visibility {
  PUBLIC
  GAME_MASTER
  PRIVATE
}

model RelatedUser {
  id     String          @id @default(uuid(7)) @db.Uuid
  larpId String          @map("larp_id") @db.Uuid
  userId String          @map("user_id") @db.Uuid
  role   RelatedUserRole

  larp Larp @relation(fields: [larpId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("related_user")
}

enum LarpLinkType {
  HOMEPAGE
  PHOTOS
  SOCIAL_MEDIA
  PLAYER_GUIDE
}

model LarpLink {
  id     String       @id @default(uuid(7)) @db.Uuid
  larpId String       @map("larp_id") @db.Uuid
  type   LarpLinkType @default(HOMEPAGE)
  href   String
  title  String?

  larp Larp @relation(fields: [larpId], references: [id], onDelete: Cascade)

  @@map("larp_link")
}

enum SubmitterRole {
  NONE
  GAME_MASTER
  VOLUNTEER
  PLAYER
}

enum EditStatus {
  PENDING_VERIFICATION
  VERIFIED
  AUTO_APPROVED
  APPROVED
  REJECTED
  WITHDRAWN
}

enum EditAction {
  CREATE
  UPDATE
  CLAIM
}

model ModerationRequest {
  id     String     @id @default(uuid(7)) @db.Uuid
  larpId String?    @map("larp_id") @db.Uuid
  action EditAction
  status EditStatus

  resolvedById    String?   @map("resolved_by_id") @db.Uuid
  resolvedAt      DateTime? @map("resolved_at")
  resolvedMessage String?

  submitterName  String        @map("submitter_name")
  submitterEmail String        @map("submitter_email")
  submitterId    String?       @map("submitter_id") @db.Uuid
  submitterRole  SubmitterRole @default(NONE) @map("submitter_role")

  verificationCode String?   @unique @default(uuid(4)) @map("verification_code") @db.Uuid
  verifiedAt       DateTime? @map("verified_at")

  oldContent Json @default("{}") @map("old_content")
  newContent Json @default("{}") @map("new_content")

  removeLinks Json @default("[]") @map("remove_links")
  addLinks    Json @default("[]") @map("add_links")

  message String?

  larp       Larp? @relation(fields: [larpId], references: [id], onDelete: Cascade)
  resolvedBy User? @relation("RequestsResolvedByUser", fields: [resolvedById], references: [id], onDelete: Cascade)
  submitter  User? @relation("RequestsSubmittedByUser", fields: [submitterId], references: [id], onDelete: Cascade)

  @@map("moderation_request")
}
