generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// next-auth
model User {
  id            String    @id @default(uuid(4)) @db.Uuid
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  RelatedUser   RelatedUser[]
  Authenticator Authenticator[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String  @db.Uuid
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// larpit.fi
enum LarpType {
  ONE_SHOT
  CAMPAIGN_LARP

  CAMPAIGN // of CAMPAIGN_LARPs
  MULTIPLE_RUNS // of ONE_SHOTs (or, in rare occasions, CAMPAIGNs)

  OTHER_EVENT_SERIES
  OTHER_EVENT
}

enum Language {
  fi
  en
  sv
  OTHER
}

model Larp {
  id           String   @id @default(uuid(7)) @db.Uuid
  name         String
  type         LarpType @default(ONE_SHOT)
  language     Language
  tagline      String?
  alias        String?  @unique
  locationText String?  @map("location_text")

  fluffText   String? @map("fluff_text")
  description String? @map("description")

  // createdAt from id (UUIDv7)
  updatedAt DateTime @updatedAt @map("updated_at")

  startsAt       DateTime? @map("starts_at")
  endsAt         DateTime? @map("ends_at")
  signupStartsAt DateTime? @map("signup_starts_at")
  signupEndsAt   DateTime? @map("signup_ends_at")

  links             LarpLink[]
  relatedLarpsLeft  RelatedLarp[] @relation("RelatedLarpsLeft")
  relatedLarpsRight RelatedLarp[] @relation("RelatedLarpsRight")
  relatedUsers      RelatedUser[]

  @@map("larp")
}

enum RelatedLarpType {
  SEQUEL
  SPINOFF

  // CAMPAIGN_LARP INSTANCE_OF CAMPAIGN
  // ONE_SHOT INSTANCE_OF MULTIPLE_RUNS
  // etc.
  IN_CAMPAIGN
  IN_SERIES
  RUN_OF
  RERUN_OF

  PLAYED_AT
}

model RelatedLarp {
  leftId  String          @map("left_id") @db.Uuid
  rightId String          @map("right_id") @db.Uuid
  type    RelatedLarpType

  left  Larp @relation("RelatedLarpsLeft", fields: [leftId], references: [id], onDelete: Cascade)
  right Larp @relation("RelatedLarpsRight", fields: [rightId], references: [id], onDelete: Cascade)

  @@id([leftId, rightId])
}

enum RelatedUserRole {
  EDITOR
  CREATED_BY
  GAME_MASTER
  ORGANIZER
  VOLUNTEER
  PLAYER
  FAVORITE
}

model RelatedUser {
  id     String          @id @default(uuid(7)) @db.Uuid
  larpId String          @map("larp_id") @db.Uuid
  userId String          @map("user_id") @db.Uuid
  role   RelatedUserRole

  larp Larp @relation(fields: [larpId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum LarpLinkType {
  HOMEPAGE
  PHOTOS
  SOCIAL_MEDIA
  PLAYER_GUIDE
}

model LarpLink {
  id     String       @id @default(uuid(7)) @db.Uuid
  larpId String       @map("larp_id") @db.Uuid
  type   LarpLinkType @default(HOMEPAGE)
  href   String
  title  String?

  larp Larp @relation(fields: [larpId], references: [id], onDelete: Cascade)

  @@map("larp_link")
}

enum SubmitterRole {
  NONE
  GAME_MASTER
  VOLUNTEER
  PLAYER
}

enum EditStatus {
  PENDING_VERIFICATION
  VERIFIED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum EditType {
  CREATE
  UPDATE
}

model EditLarpRequest {
  id     String     @id @default(uuid(7)) @db.Uuid
  larpId String?    @map("larp_id") @db.Uuid
  type   EditType
  status EditStatus

  resolvedById String?   @map("resolved_by_id") @db.Uuid
  resolvedAt   DateTime? @map("resolved_at")

  submitterName  String        @map("submitter_name")
  submitterEmail String        @map("submitter_email")
  submitterId    String?       @map("submitter_id") @db.Uuid
  submitterRole  SubmitterRole @default(NONE) @map("submitter_role")

  verificationCode String?   @unique @default(uuid(4)) @db.Uuid
  verifiedAt       DateTime?

  oldContent Json @default("{}")
  newContent Json @default("{}")

  message String?
}
